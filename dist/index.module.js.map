{"version":3,"file":"index.module.js","sources":["../src/errors/negativeLengthError.js","../src/errors/maxLengthExceededError.js","../src/components/RandomText.js","../src/errors/noHandleSuccessCallbackError.js","../src/errors/noHandleFailureCallbackError.js","../src/index.js"],"sourcesContent":["class NegativeLengthError extends RangeError {\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'NegativeLengthError';\r\n\t\tthis.message = message;\r\n\t}\r\n}\r\n\r\nexport default NegativeLengthError;","class MaxLengthExceededError extends Error {\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'MaxLengthExceededError';\r\n\t\tthis.message = message;\r\n\t}\r\n}\r\n\r\nexport default MaxLengthExceededError;\r\n","import React from 'react';\r\n\r\nimport NegativeLengthError from '../errors/negativeLengthError';\r\nimport MaxLengthExceededError from '../errors/maxLengthExceededError';\r\n\r\n// Function : Generates a random captcha\r\nexport const generateRandomCaptcha = (charset, length) => {\r\n    const characterSets = {\r\n        uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n        lowercase: 'abcdefghijklmnopqrstuvwxyz',\r\n        number: '0123456789',\r\n        special: `~\\`!@#$%^&*()-_=+\\\\|{}[]:;\"'<>,./?`\r\n    }\r\n\r\n    charset = charset.toLowerCase();\r\n    length = length || 6;\r\n\r\n    if(!Number.isInteger(length)) {\r\n        throw new TypeError('Length must be a positive integer');\r\n    }\r\n\r\n    if(length < 0) {\r\n        throw new NegativeLengthError('Captcha length must be a positive number.');\r\n    }\r\n    else if(length < 4) {\r\n        console.warn('Captcha length must be at least 4 characters long.');\r\n    }\r\n\r\n    if(length > 255) {\r\n        throw new MaxLengthExceededError('Captcha length must be less than 255 characters long.');\r\n    }\r\n    else if(length > 8) {\r\n        console.warn('Captcha length must be less than 8 characters long.');\r\n    }\r\n\r\n    let captchaCharset = '';\r\n    let captcha = '';\r\n\r\n    if(charset.includes('u')) {\r\n        captchaCharset += characterSets.uppercase;\r\n    }\r\n    if(charset.includes('l')) {\r\n        captchaCharset += characterSets.lowercase;\r\n    }\r\n    if(charset.includes('n')) {\r\n        captchaCharset += characterSets.number;\r\n    }\r\n    if(charset.includes('s')) {\r\n        captchaCharset += characterSets.special;\r\n    }\r\n\r\n    if(charset === '') {\r\n        captchaCharset = characterSets.uppercase + characterSets.lowercase + characterSets.number + characterSets.special;\r\n    }\r\n\r\n    for(let i = 0; i < length; i++) {\r\n        captcha += captchaCharset.charAt(Math.floor(Math.random() * captchaCharset.length));\r\n    }\r\n\r\n    return captcha;\r\n}\r\n\r\n// Function: Generates a random hex color\r\nconst generateRandomHexColor = () => {\r\n    const hex = '0123456789ABCDEF';\r\n    let color = '#';\r\n\r\n    for(let i = 0; i < 6; i++) {\r\n        color += hex.charAt(Math.floor(Math.random() * hex.length));\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nconst RandomText = ({ text, color, bgColor }) => {\r\n    const fontSizes = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\r\n    const fontWeights = ['light', 'normal', 'bold'];\r\n    const fontFamilies = ['Cambria', 'Calibri', 'Mangal', 'Arial Narrow', 'Sanskrit Text', 'Adobe Caslon Pro', 'Adobe Caslon Pro Bold', 'Adobe Garamand Pro', 'Adobe Garamand Pro Bold', 'Agency FB', 'Algerian', 'Aparajita', 'Arial', 'Arno Pro', 'Bahnschrift', 'Bauhas 93', 'Bell MT', 'Berlin Sans FB', 'Birch STD', 'Bradley Hand ITC', 'Broadway', 'Candara', 'Cascadia Code', 'Castellar', 'Consolas', 'Cooper Std Black', 'Curlz MT', 'Courier New', 'Gabriola', 'Ink Free', 'MV Boli', 'Orator Std', 'Papyrus', 'Tahoma', 'Cursive', 'sans-serif'];\r\n\r\n    const captcha = text;\r\n\r\n    return (\r\n        <div className=\"r-captcha__captchaText\" style={{ width: 'fit-content', padding: '3px 10px', backgroundColor: `${(bgColor === 'random' || !bgColor) ? generateRandomHexColor() : bgColor}` }}>\r\n            {\r\n                captcha.split('').map(unit => (\r\n                    <span key={Math.random() - Math.random()} className='r-captcha__character' style={{ color: `${color === 'random' ? generateRandomHexColor() : color}`, fontSize: `${fontSizes[Math.floor(Math.random() * fontSizes.length)]}px`, fontWeight: `${fontWeights[Math.floor(Math.random() * fontWeights.length)]}`, fontStyle: `${Math.random() > 0.5 ? 'italic' : 'normal'}`, fontFamily: `${fontFamilies[Math.floor(Math.random() * fontFamilies.length)]}` }}>{unit}</span>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nRandomText.defaultProps = {\r\n\ttext: '',\r\n\tcolor: 'random',\r\n\tbgColor: 'random'\r\n}\r\n\r\nexport default RandomText;\r\n","class NoHandleSuccessCallbackError extends Error {\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'NoHandleSuccessCallbackError';\r\n\t\tthis.message = message;\r\n\t}\r\n}\r\n\r\nexport default NoHandleSuccessCallbackError;","class NoHandleFailureCallbackError extends Error {\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'NoHandleFailureCallbackError';\r\n\t\tthis.message = message;\r\n\t}\r\n}\r\n\r\nexport default NoHandleFailureCallbackError;","import React, { useState, useRef } from 'react';\r\n\r\nimport RandomText, { generateRandomCaptcha } from './components/RandomText';\r\n\r\nimport NoHandleSuccessCallbackError from './errors/noHandleSuccessCallbackError';\r\nimport NoHandleFailureCallbackError from './errors/noHandleFailureCallbackError';\r\n\r\nconst ReactCaptcha = ({ charset, length, color, bgColor, reload, reloadText, reloadIcon, handleSuccess, handleFailure }) => {\r\n    if(!handleSuccess) {\r\n        throw new NoHandleSuccessCallbackError('You must provide a callback function for successs');\r\n    }\r\n    if(!handleFailure) {\r\n        throw new NoHandleFailureCallbackError('You must provide a callback function for failure');\r\n    }\r\n\r\n\tif(typeof handleSuccess !== 'function') {\r\n\t\tthrow new TypeError('handleSuccess must be a function');\r\n\t}\r\n\tif(typeof handleFailure !== 'function') {\r\n\t\tthrow new TypeError('handleFailure must be a function');\r\n\t}\r\n\r\n    const [captcha, setCaptcha] = useState(generateRandomCaptcha(charset, length));\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const reloadCaptcha = () => {\r\n        setCaptcha(generateRandomCaptcha(charset, length));\r\n    }\r\n\r\n    const evaluateCaptcha = () => {\r\n        if (captcha === inputRef.current.value) {\r\n            handleSuccess();\r\n        }\r\n        else {\r\n            handleFailure();\r\n        }\r\n\r\n        inputRef.current.value = '';\r\n    }\r\n\r\n    return (\r\n        <div className=\"r-captcha\">\r\n            <RandomText text={captcha} color={color} bgColor={bgColor} />\r\n\r\n            {reload && <button className='r-captcha__reloadBtn' onClick={reloadCaptcha}>{reloadText ? reloadText : 'Reload Captcha'}{reloadIcon && <img src={reloadIcon} alt='Reload' style={{ width: '20px', height: '20px' }} />}</button>}\r\n\r\n            <input ref={inputRef} type=\"text\" placeholder=\"Enter captcha\" className='r-captcha__inputField' />\r\n            <button type=\"button\" onClick={evaluateCaptcha} className='r-captcha__submitBtn'>Submit</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nReactCaptcha.defaultProps = {\r\n\tcharset: 'ulns',\r\n\tlength: 6,\r\n\tcolor: '#000',\r\n\tbgColor: '#fff',\r\n\treload: false,\r\n\treloadText: 'Reload Captcha',\r\n}\r\n\r\nexport default ReactCaptcha;\r\n"],"names":["NegativeLengthError","_RangeError","message","_this","call","this","name","_inheritsLoose","RangeError","MaxLengthExceededError","_Error","Error","generateRandomCaptcha","charset","length","characterSets","toLowerCase","Number","isInteger","TypeError","console","warn","captchaCharset","captcha","includes","i","charAt","Math","floor","random","generateRandomHexColor","hex","color","RandomText","text","bgColor","_ref","fontSizes","fontWeights","fontFamilies","h","className","style","width","padding","backgroundColor","split","map","unit","key","fontSize","fontWeight","fontStyle","fontFamily","defaultProps","NoHandleSuccessCallbackError","NoHandleFailureCallbackError","ReactCaptcha","reload","reloadText","reloadIcon","handleSuccess","handleFailure","useState","_useState","setCaptcha","inputRef","useRef","onClick","src","alt","height","ref","type","placeholder","current","value"],"mappings":"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"}